import { useState } from "react";
import { Download, Share2, Instagram, Twitter, Facebook, X } from "lucide-react";
import { toast } from "sonner";

interface ResultDisplayProps {
  originalImage: string;
  processedImage: string;
  onReset: () => void;
  imageUrl?: string;
}

interface InstructionModalProps {
  onClose: () => void;
  onOpenInstagram: () => void;
}

// A dedicated instruction modal component for Instagram sharing
const InstagramInstructionsModal = ({ onClose, onOpenInstagram }: InstructionModalProps) => (
  <div className="fixed inset-0 bg-black/70 backdrop-blur-sm z-50 flex items-center justify-center p-4 animate-fade-in">
    <div className="glass rounded-lg max-w-md w-full p-6 animate-scale-in">
      <h3 className="text-xl text-white mb-4">Share to Instagram</h3>
      <ol className="text-white/80 space-y-3 list-decimal list-inside mb-6">
        <li>The image has been saved to your device</li>
        <li>Open Instagram app</li>
        <li>Tap <span className="text-apocalypse-terminal">+</span> to create a new post</li>
        <li>Select the downloaded image from your gallery</li>
        <li>Tag <span className="font-mono bg-apocalypse-darkgray/50 px-1 rounded">@replacern</span> in your post</li>
        <li>Add <span className="font-mono bg-apocalypse-darkgray/50 px-1 rounded">#LastNurses</span> to get featured</li>
      </ol>
      <div className="flex flex-col sm:flex-row gap-3 sm:justify-between">
        <button 
          onClick={onOpenInstagram} 
          className="w-full px-4 py-3 bg-gradient-to-r from-[#405DE6] via-[#5B51D8] to-[#833AB4] text-white rounded-md font-medium flex items-center justify-center space-x-2"
        >
          <Instagram size={18} />
          <span>Open Instagram</span>
        </button>
        <button 
          onClick={onClose} 
          className="w-full px-4 py-3 bg-apocalypse-darkgray text-white rounded-md"
        >
          Close
        </button>
      </div>
    </div>
  </div>
);

export default function ResultDisplay({ 
  originalImage, 
  processedImage, 
  onReset,
  imageUrl 
}: ResultDisplayProps) {
  const [showOriginal, setShowOriginal] = useState(false);
  const [showInstructionsModal, setShowInstructionsModal] = useState(false);

  // Get the actual image URL to share - prefer the direct URL if available
  const getShareableImageUrl = () => {
    return imageUrl || processedImage;
  };

  const handleDownload = () => {
    // Create a temporary link element
    const link = document.createElement("a");
    link.href = processedImage;
    link.download = "lastNurses_transformed.jpg";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    toast.success("Image downloaded successfully");
    return true; // Return success status for chaining
  };

  const openInstagram = () => {
    // Detect device for better app opening
    const ua = navigator.userAgent.toLowerCase();
    const isIOS = /iphone|ipad|ipod/.test(ua);
    const isAndroid = /android/.test(ua);
    
    if (isIOS || isAndroid) {
      // Try to open Instagram app directly
      window.location.href = 'instagram://';
      
      // Fallback to website after short delay if app didn't open
      setTimeout(() => {
        if (document.hasFocus()) {
          window.open('https://www.instagram.com', '_blank');
        }
      }, 500);
    } else {
      // On desktop, just open the website
      window.open('https://www.instagram.com', '_blank');
    }
  };

  const handleInstagramShare = async () => {
    // First download the image
    const downloadSuccess = handleDownload();
    
    // Then show instructions modal
    if (downloadSuccess) {
      setShowInstructionsModal(true);
    }
    
    // Try advanced mobile sharing if available
    if (navigator.share) {
      try {
        // Fetch the image and convert it to a blob for native sharing
        const response = await fetch(processedImage);
        const blob = await response.blob();
        const file = new File([blob], "lastNurses_transformed.jpg", { type: blob.type });
        
        await navigator.share({
          title: "My Last Nurses Transformation",
          text: "Generated by thelastnurses.com, a creation of @replacern",
          files: [file]
        }).then(() => {
          // Close modal if share was successful
          setShowInstructionsModal(false);
          toast.success("Shared successfully!");
        }).catch(err => {
          // Keep modal open - the user might still want to follow instructions
          console.log("Native share error:", err);
        });
      } catch (error) {
        // Error already handled by keeping the modal open
        console.error("Error in native sharing:", error);
      }
    }
  };

  const handleTwitterShare = () => {
    const shareableImageUrl = getShareableImageUrl();
    
    // Keep the original shareText with @ReplaceRN reference
    const twitterText = encodeURIComponent("Generated by thelastnurses.com, a creation of @ReplaceRN");
    
    // Share with both text and image URL
    window.open(`https://twitter.com/intent/tweet?text=${twitterText}&url=${encodeURIComponent(shareableImageUrl)}`, "_blank");
    toast.success("Opening Twitter...");
  };

  const handleFacebookShare = () => {
    const shareableImageUrl = getShareableImageUrl();
    
    // For Facebook, use the original shareText
    const shareText = "Generated by thelastnurses.com, a creation of @replacern";
    // Facebook sharing - use the image URL directly
    window.open(`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareableImageUrl)}&quote=${encodeURIComponent(shareText)}`, "_blank");
    toast.success("Opening Facebook...");
  };

  return (
    <div className="text-center">
      <h3 className="text-xl text-white mb-4">Transformation Complete!</h3>
      
      <div className="flex flex-col md:flex-row gap-6 max-w-3xl mx-auto mb-8">
        <div className="flex-1 relative glass rounded-lg overflow-hidden">
          <img 
            src={showOriginal ? originalImage : processedImage} 
            alt={showOriginal ? "Original Image" : "Transformed Image"} 
            className="w-full h-auto object-contain"
          />
          
          {/* Before/After Toggle */}
          <button
            className="absolute bottom-4 left-1/2 transform -translate-x-1/2 px-4 py-2 bg-apocalypse-darkgray/90 hover:bg-apocalypse-darkgray text-white text-sm rounded-full backdrop-blur-sm transition-colors"
            onClick={() => setShowOriginal(!showOriginal)}
          >
            {showOriginal ? "Show Transformed" : "Show Original"}
          </button>
        </div>
      </div>
      
      <div className="flex flex-wrap justify-center gap-4 mb-8">
        <button
          onClick={handleDownload}
          className="px-4 py-2 bg-apocalypse-darkgray hover:bg-apocalypse-gray text-white rounded-md transition-colors flex items-center space-x-2"
        >
          <Download size={16} />
          <span>Download</span>
        </button>
        
        <button
          onClick={handleInstagramShare}
          className="px-4 py-2 bg-apocalypse-darkgray hover:bg-[#E1306C]/80 text-white rounded-md transition-colors flex items-center space-x-2"
        >
          <Instagram size={16} />
          <span>Instagram</span>
        </button>
        
        <button
          onClick={handleTwitterShare}
          className="px-4 py-2 bg-apocalypse-darkgray hover:bg-[#1DA1F2]/80 text-white rounded-md transition-colors flex items-center space-x-2"
        >
          <Twitter size={16} />
          <span>Twitter</span>
        </button>
        
        <button
          onClick={handleFacebookShare}
          className="px-4 py-2 bg-apocalypse-darkgray hover:bg-[#4267B2]/80 text-white rounded-md transition-colors flex items-center space-x-2"
        >
          <Facebook size={16} />
          <span>Facebook</span>
        </button>
      </div>
      
      <button
        onClick={onReset}
        className="px-6 py-2 bg-apocalypse-green/80 hover:bg-apocalypse-green text-black rounded-md transition-colors font-medium"
      >
        Transform Another Image
      </button>
      
      {/* Instagram Instructions Modal */}
      {showInstructionsModal && (
        <InstagramInstructionsModal 
          onClose={() => setShowInstructionsModal(false)}
          onOpenInstagram={openInstagram}
        />
      )}
    </div>
  );
}