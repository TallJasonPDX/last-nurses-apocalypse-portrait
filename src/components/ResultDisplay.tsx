import { useState } from "react";
import { Download, Share2, Instagram, Twitter, Facebook, X } from "lucide-react";
import { toast } from "sonner";

interface ResultDisplayProps {
  originalImage: string;
  processedImage: string;
  onReset: () => void;
  imageUrl?: string;
  hideReset?: boolean;
}

interface InstructionModalProps {
  onClose: () => void;
  onOpenInstagram: () => void;
}

const InstagramInstructionsModal = ({ onClose, onOpenInstagram }: InstructionModalProps) => (
  <div className="fixed inset-0 bg-black/70 backdrop-blur-sm z-50 flex items-center justify-center p-4 animate-fade-in">
    <div className="glass rounded-lg max-w-md w-full p-6 animate-scale-in">
      <h3 className="text-xl text-white mb-4">Share to Instagram</h3>
      <ol className="text-white/80 space-y-3 list-decimal list-inside mb-6">
        <li>The image has been saved to your device</li>
        <li>Open Instagram app</li>
        <li>Tap <span className="text-apocalypse-terminal">+</span> to create a new post</li>
        <li>Select the downloaded image from your gallery</li>
        <li>Tag <span className="font-mono bg-apocalypse-darkgray/50 px-1 rounded">@replacern</span> in your post</li>
        <li>Add <span className="font-mono bg-apocalypse-darkgray/50 px-1 rounded">#LastNurses</span> to get featured</li>
      </ol>
      <div className="flex flex-col sm:flex-row gap-3 sm:justify-between">
        <button 
          onClick={onOpenInstagram} 
          className="w-full px-4 py-3 bg-gradient-to-r from-[#405DE6] via-[#5B51D8] to-[#833AB4] text-white rounded-md font-medium flex items-center justify-center space-x-2"
        >
          <Instagram size={18} />
          <span>Open Instagram</span>
        </button>
        <button 
          onClick={onClose} 
          className="w-full px-4 py-3 bg-apocalypse-darkgray text-white rounded-md"
        >
          Close
        </button>
      </div>
    </div>
  </div>
);

export default function ResultDisplay({ 
  originalImage, 
  processedImage, 
  onReset,
  imageUrl,
  hideReset = false
}: ResultDisplayProps) {
  const [showOriginal, setShowOriginal] = useState(false);
  const [showInstructionsModal, setShowInstructionsModal] = useState(false);

  const getShareableImageUrl = () => {
    return imageUrl || processedImage;
  };

  const handleDownload = () => {
    const link = document.createElement("a");
    link.href = processedImage;
    link.download = "lastNurses_transformed.jpg";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    toast.success("Image downloaded successfully");
    return true;
  };

  const openInstagram = () => {
    const ua = navigator.userAgent.toLowerCase();
    const isIOS = /iphone|ipad|ipod/.test(ua);
    const isAndroid = /android/.test(ua);
    
    if (isIOS || isAndroid) {
      window.location.href = 'instagram://';
      
      setTimeout(() => {
        if (document.hasFocus()) {
          window.open('https://www.instagram.com', '_blank');
        }
      }, 500);
    } else {
      window.open('https://www.instagram.com', '_blank');
    }
  };

  const handleInstagramShare = async () => {
    const downloadSuccess = handleDownload();
    
    if (downloadSuccess) {
      setShowInstructionsModal(true);
    }
    
    if (navigator.share) {
      try {
        const response = await fetch(processedImage);
        const blob = await response.blob();
        const file = new File([blob], "lastNurses_transformed.jpg", { type: blob.type });
        
        await navigator.share({
          title: "My Last Nurses Transformation",
          text: "Generated by thelastnurses.com, a creation of @replacern",
          files: [file]
        }).then(() => {
          setShowInstructionsModal(false);
          toast.success("Shared successfully!");
        }).catch(err => {
          console.log("Native share error:", err);
        });
      } catch (error) {
        console.error("Error in native sharing:", error);
      }
    }
  };

  const handleTwitterShare = () => {
    const shareableImageUrl = getShareableImageUrl();
    
    const twitterText = encodeURIComponent("Generated by thelastnurses.com, a creation of @ReplaceRN");
    
    window.open(`https://twitter.com/intent/tweet?text=${twitterText}&url=${encodeURIComponent(shareableImageUrl)}`, "_blank");
    toast.success("Opening Twitter...");
  };

  const handleFacebookShare = () => {
    const shareableImageUrl = getShareableImageUrl();
    
    const shareText = "Generated by thelastnurses.com, a creation of @replacern";
    window.open(`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareableImageUrl)}&quote=${encodeURIComponent(shareText)}`, "_blank");
    toast.success("Opening Facebook...");
  };

  return (
    <div className="text-center">
      <div className="flex flex-col gap-6 mx-auto mb-4">
        <div className="relative">
          <img 
            src={showOriginal ? originalImage : processedImage} 
            alt={showOriginal ? "Original Image" : "Transformed Image"} 
            className="w-full h-auto object-contain"
            onError={(e) => {
              const target = e.target as HTMLImageElement;
              target.onerror = null;
              target.src = "";
              target.parentElement!.innerHTML = `
                <div class="aspect-square w-full bg-apocalypse-darkgray flex items-center justify-center">
                  <svg xmlns="http://www.w3.org/2000/svg" width="48" height="48" viewBox="0 0 24 24" fill="none" 
                       stroke="rgba(255,255,255,0.3)" stroke-width="2" stroke-linecap="round" 
                       stroke-linejoin="round" class="lucide lucide-image-off">
                    <line x1="2" y1="2" x2="22" y2="22"></line>
                    <path d="M10.41 10.41a2 2 0 1 1 3.18 3.18"></path>
                    <path d="M2.08 19h4.24c.96 0 1.82-.32 2.56-.88l10.4-10.4c.47-.47.72-1.1.72-1.76 0-1.36-1.12-2.48-2.48-2.48-.66 0-1.29.24-1.76.72l-10.4 10.4c-.56.74-.88 1.6-.88 2.56V19"></path>
                  </svg>
                  <span class="text-white/50 ml-2">Image Loading Failed</span>
                </div>
              `;
            }}
          />
          
          <button
            className="absolute bottom-4 left-1/2 transform -translate-x-1/2 px-4 py-2 bg-apocalypse-darkgray/90 hover:bg-apocalypse-darkgray text-white text-sm rounded-full backdrop-blur-sm transition-colors"
            onClick={() => setShowOriginal(!showOriginal)}
          >
            {showOriginal ? "Show Transformed" : "Show Original"}
          </button>
        </div>
      </div>
      
      <div className="flex flex-wrap justify-center gap-4 mb-4">
        <button
          onClick={handleDownload}
          className="px-4 py-2 bg-apocalypse-darkgray hover:bg-apocalypse-gray text-white rounded-md transition-colors flex items-center space-x-2"
        >
          <Download size={16} />
          <span>Download</span>
        </button>
        
        <button
          onClick={handleInstagramShare}
          className="px-4 py-2 bg-apocalypse-darkgray hover:bg-[#E1306C]/80 text-white rounded-md transition-colors flex items-center space-x-2"
        >
          <Instagram size={16} />
          <span>Instagram</span>
        </button>
        
        <button
          onClick={handleTwitterShare}
          className="px-4 py-2 bg-apocalypse-darkgray hover:bg-[#1DA1F2]/80 text-white rounded-md transition-colors flex items-center space-x-2"
        >
          <Twitter size={16} />
          <span>Twitter</span>
        </button>
        
        <button
          onClick={handleFacebookShare}
          className="px-4 py-2 bg-apocalypse-darkgray hover:bg-[#4267B2]/80 text-white rounded-md transition-colors flex items-center space-x-2"
        >
          <Facebook size={16} />
          <span>Facebook</span>
        </button>
      </div>
      
      {!hideReset && (
        <button
          onClick={onReset}
          className="px-6 py-2 bg-apocalypse-green/80 hover:bg-apocalypse-green text-black rounded-md transition-colors font-medium"
        >
          Transform Another Image
        </button>
      )}
      
      {showInstructionsModal && (
        <InstagramInstructionsModal 
          onClose={() => setShowInstructionsModal(false)}
          onOpenInstagram={openInstagram}
        />
      )}
    </div>
  );
}
