
import { useState } from "react";
import { Download, Share2, Instagram, Twitter, Facebook } from "lucide-react";
import { toast } from "sonner";

interface ResultDisplayProps {
  originalImage: string;
  processedImage: string;
  onReset: () => void;
  imageUrl?: string; // Add the new imageUrl prop
}

export default function ResultDisplay({ 
  originalImage, 
  processedImage, 
  onReset,
  imageUrl 
}: ResultDisplayProps) {
  const [showOriginal, setShowOriginal] = useState(false);

  // Get the actual image URL to share - prefer the direct URL if available
  const getShareableImageUrl = () => {
    return imageUrl || processedImage;
  };

  const handleDownload = () => {
    // Create a temporary link element
    const link = document.createElement("a");
    link.href = processedImage;
    link.download = "lastNurses_transformed.jpg";
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    toast.success("Image downloaded successfully");
  };

  const handleShare = async (platform: string) => {
    const siteUrl = window.location.origin;
    const shareText = "Generated by thelastnurses.com, a creation of ";
    const shareableImageUrl = getShareableImageUrl();
    
    // For platforms that support the Web Share API
    if (navigator.share && (platform === "Native" || platform === "Instagram")) {
      try {
        // First we need to fetch the image and convert it to a blob
        const response = await fetch(processedImage);
        const blob = await response.blob();
        const file = new File([blob], "lastNurses_transformed.jpg", { type: blob.type });
        
        await navigator.share({
          title: "My Last Nurses Transformation",
          text: shareText + (platform === "Instagram" ? "@replacern" : ""),
          files: [file]
        }).catch(err => {
          console.log("Error sharing:", err);
          // Fallback if file sharing fails - just share text and URL
          navigator.share({
            title: "My Last Nurses Transformation",
            text: shareText + (platform === "Instagram" ? "@replacern" : ""),
            url: shareableImageUrl
          });
        });
        
        toast.success(`Shared successfully!`);
      } catch (error) {
        console.error("Error sharing:", error);
        toast.error("Sharing failed. Try another method.");
        
        // Fallback for Instagram specifically
        if (platform === "Instagram") {
          window.open("https://www.instagram.com");
          toast("Open Instagram and upload the downloaded image");
        }
      }
      return;
    }
    
    // Platform-specific sharing
    switch (platform) {
      case "Twitter":
        // Twitter (X) uses different sharing parameters
        const twitterText = encodeURIComponent(shareText + "@ReplaceRN");
        // For Twitter we share directly to the site without including the image URL in text
        window.open(`https://twitter.com/intent/tweet?text=${twitterText}&url=${encodeURIComponent(siteUrl)}`, "_blank");
        toast.success("Opening Twitter...");
        break;
        
      case "Facebook":
        // Facebook sharing - use the image URL directly
        window.open(`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareableImageUrl)}`, "_blank");
        toast.success("Opening Facebook...");
        break;
        
      case "Instagram":
        // Instagram doesn't have a direct web sharing API
        // Suggest downloading and uploading manually
        toast("Instagram doesn't support direct sharing from web");
        toast("Please download the image and upload it to Instagram");
        window.open("https://www.instagram.com", "_blank");
        break;
    }
  };

  return (
    <div className="text-center">
      <h3 className="text-xl text-white mb-4">Transformation Complete!</h3>
      
      <div className="flex flex-col md:flex-row gap-6 max-w-3xl mx-auto mb-8">
        <div className="flex-1 relative glass rounded-lg overflow-hidden">
          <img 
            src={showOriginal ? originalImage : processedImage} 
            alt={showOriginal ? "Original Image" : "Transformed Image"} 
            className="w-full h-auto object-contain"
          />
          
          {/* Before/After Toggle */}
          <button
            className="absolute bottom-4 left-1/2 transform -translate-x-1/2 px-4 py-2 bg-apocalypse-darkgray/90 hover:bg-apocalypse-darkgray text-white text-sm rounded-full backdrop-blur-sm transition-colors"
            onClick={() => setShowOriginal(!showOriginal)}
          >
            {showOriginal ? "Show Transformed" : "Show Original"}
          </button>
        </div>
      </div>
      
      <div className="flex flex-wrap justify-center gap-4 mb-8">
        <button
          onClick={handleDownload}
          className="px-4 py-2 bg-apocalypse-darkgray hover:bg-apocalypse-gray text-white rounded-md transition-colors flex items-center space-x-2"
        >
          <Download size={16} />
          <span>Download</span>
        </button>
        
        <button
          onClick={() => handleShare("Instagram")}
          className="px-4 py-2 bg-apocalypse-darkgray hover:bg-[#E1306C]/80 text-white rounded-md transition-colors flex items-center space-x-2"
        >
          <Instagram size={16} />
          <span>Instagram</span>
        </button>
        
        <button
          onClick={() => handleShare("Twitter")}
          className="px-4 py-2 bg-apocalypse-darkgray hover:bg-[#1DA1F2]/80 text-white rounded-md transition-colors flex items-center space-x-2"
        >
          <Twitter size={16} />
          <span>Twitter</span>
        </button>
        
        <button
          onClick={() => handleShare("Facebook")}
          className="px-4 py-2 bg-apocalypse-darkgray hover:bg-[#4267B2]/80 text-white rounded-md transition-colors flex items-center space-x-2"
        >
          <Facebook size={16} />
          <span>Facebook</span>
        </button>
      </div>
      
      <button
        onClick={onReset}
        className="px-6 py-2 bg-apocalypse-green/80 hover:bg-apocalypse-green text-black rounded-md transition-colors font-medium"
      >
        Transform Another Image
      </button>
    </div>
  );
}
