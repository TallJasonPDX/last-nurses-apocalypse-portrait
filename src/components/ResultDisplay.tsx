import { useState } from "react";
import { Download, Instagram, Twitter, Facebook } from "lucide-react";
import { toast } from "sonner";
import { InstagramInstructionsModal } from "./InstagramInstructionsModal";

interface ResultDisplayProps {
  originalImage: string;
  processedImage: string;
  onReset: () => void;
  imageUrl?: string;
  hideReset?: boolean;
}

export default function ResultDisplay({ 
  originalImage, 
  processedImage, 
  onReset,
  imageUrl,
  hideReset = false
}: ResultDisplayProps) {
  const [showOriginal, setShowOriginal] = useState(false);
  const [showInstructionsModal, setShowInstructionsModal] = useState(false);

  const getShareableImageUrl = () => {
    return imageUrl || processedImage;
  };

  const handleDownload = async (): Promise<boolean> => {
    try {
      const imageSrc = processedImage;
      if (!imageSrc) {
        toast.error("No processed image available to download.");
        return false;
      }

      const response = await fetch(imageSrc);
      if (!response.ok) {
        throw new Error(`Failed to fetch image for download: ${response.statusText}`);
      }
      const blob = await response.blob();

      const url = window.URL.createObjectURL(blob);
      const link = document.createElement("a");
      link.href = url;
      link.download = "lastNurses_transformed.png";
      document.body.appendChild(link);

      link.click();
      document.body.removeChild(link);
      window.URL.revokeObjectURL(url);

      toast.success("Image download started");
      return true;
    } catch (error) {
      console.error("Download error:", error);
      toast.error("Failed to download image.");
      return false;
    }
  };

  const openInstagram = () => {
    const ua = navigator.userAgent.toLowerCase();
    const isIOS = /iphone|ipad|ipod/.test(ua);
    const isAndroid = /android/.test(ua);
    
    if (isIOS || isAndroid) {
      window.location.href = 'instagram://';
      
      setTimeout(() => {
        if (document.hasFocus()) {
          window.open('https://www.instagram.com', '_blank');
        }
      }, 500);
    } else {
      window.open('https://www.instagram.com', '_blank');
    }
  };

  const handleInstagramShare = async () => {
    const downloadSuccess = await handleDownload();

    if (!downloadSuccess) {
      toast.error("Could not download image for sharing.");
      return;
    }

    setShowInstructionsModal(true);

    if (navigator.share) {
      try {
        const response = await fetch(processedImage);
        const blob = await response.blob();
        const file = new File([blob], "lastNurses_transformed.png", { type: blob.type });

        await navigator.share({
          title: "My Last Nurses Transformation",
          text: "Check out my post-apocalyptic nurse transformation! #LastNurses @ReplaceRN - generated via thelastnurses.com",
          files: [file]
        });

        console.log("Native share successful.");
      } catch (error: any) {
        if (error.name !== 'AbortError') {
          console.warn("Native share API failed:", error);
        } else {
          console.log("Native share cancelled by user.");
        }
      }
    } else {
      console.log("Native Share API not supported, using modal instructions.");
    }
  };

  const handleTwitterShare = () => {
    const shareableImageUrl = getShareableImageUrl();
    
    const twitterText = encodeURIComponent("Generated by thelastnurses.com, a creation of @ReplaceRN");
    
    window.open(`https://twitter.com/intent/tweet?text=${twitterText}&url=${encodeURIComponent(shareableImageUrl)}`, "_blank");
    toast.success("Opening Twitter...");
  };

  const handleFacebookShare = () => {
    const shareableImageUrl = getShareableImageUrl();
    
    const shareText = "Generated by thelastnurses.com, a creation of @replacern";
    window.open(`https://www.facebook.com/sharer/sharer.php?u=${encodeURIComponent(shareableImageUrl)}&quote=${encodeURIComponent(shareText)}`, "_blank");
    toast.success("Opening Facebook...");
  };

  return (
    <div className="text-center">
      <div className="flex flex-col gap-6 mx-auto mb-4">
        <div className="relative">
          <img 
            src={showOriginal ? originalImage : processedImage} 
            alt={showOriginal ? "Original Image" : "Transformed Image"} 
            className="w-full h-auto object-contain"
            onError={(e) => {
              const target = e.target as HTMLImageElement;
              target.onerror = null;
              target.src = "";
              target.parentElement!.innerHTML = `
                <div className="aspect-square w-full bg-apocalypse-darkgray flex items-center justify-center">
                  <span className="text-white/50">Image Loading Failed</span>
                </div>
              `;
            }}
          />
          
          <button
            className="absolute bottom-4 left-1/2 transform -translate-x-1/2 px-4 py-2 bg-apocalypse-darkgray/90 hover:bg-apocalypse-darkgray text-white text-sm rounded-full backdrop-blur-sm transition-colors"
            onClick={() => setShowOriginal(!showOriginal)}
          >
            {showOriginal ? "Show Transformed" : "Show Original"}
          </button>
        </div>
      </div>
      
      <div className="flex flex-wrap justify-center gap-4 mb-4">
        <button
          onClick={() => handleDownload()}
          className="px-4 py-2 bg-apocalypse-darkgray hover:bg-apocalypse-gray text-white rounded-md transition-colors flex items-center space-x-2"
        >
          <Download size={16} />
          <span>Download</span>
        </button>
        
        <button
          onClick={handleInstagramShare}
          className="px-4 py-2 bg-apocalypse-darkgray hover:bg-[#E1306C]/80 text-white rounded-md transition-colors flex items-center space-x-2"
        >
          <Instagram size={16} />
          <span>Instagram</span>
        </button>
        
        <button
          onClick={handleTwitterShare}
          className="px-4 py-2 bg-apocalypse-darkgray hover:bg-[#1DA1F2]/80 text-white rounded-md transition-colors flex items-center space-x-2"
        >
          <Twitter size={16} />
          <span>Twitter</span>
        </button>
        
        <button
          onClick={handleFacebookShare}
          className="px-4 py-2 bg-apocalypse-darkgray hover:bg-[#4267B2]/80 text-white rounded-md transition-colors flex items-center space-x-2"
        >
          <Facebook size={16} />
          <span>Facebook</span>
        </button>
      </div>
      
      {!hideReset && (
        <button
          onClick={onReset}
          className="px-6 py-2 bg-apocalypse-green/80 hover:bg-apocalypse-green text-black rounded-md transition-colors font-medium"
        >
          Transform Another Image
        </button>
      )}
      
      {showInstructionsModal && (
        <InstagramInstructionsModal 
          onClose={() => setShowInstructionsModal(false)}
          onOpenInstagram={openInstagram}
        />
      )}
    </div>
  );
}
